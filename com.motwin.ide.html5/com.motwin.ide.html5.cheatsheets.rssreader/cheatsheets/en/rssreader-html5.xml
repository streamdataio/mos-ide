<?xml version="1.0" encoding="UTF-8"?>
<cheatsheet
      title="Create a RSS Reader Motwin HTML5 application">
   <intro>
      <description>
This cheat sheet shows you how to create a simple Motwin HTML5 RSS Reader application and try it out. You will create an HTML5 Motwin project and see how to send and receive a request from the HTML5 application. This rssReader application is designed to interact with the Motwin Server rssReader.
<br/><br/>
Pre-requisites: 
<br/>- Have the Motwin Server rssReader running. You can refer to the cheatsheet &apos;Create a RSS Reader Motwin Server Sample&apos; for help.
<br/><br/>
Make sure you use the <b>exact values</b> indicated in the cheat sheet scenario. Otherwise, you may not be able to use automatic actions provided in the cheat sheet.
<br/><br/>
Don&apos;t forget to <b>check each step</b> before going to the next one.
      </description>
   </intro>
   <item
         title="Create a new Motwin HTML5 project" dialog="true">
      <description>
         We will start by creating a Motwin HTML5 project.
      </description>
      <subitem label="Select &quot;File &gt; New &gt; Project...&quot;, choose &quot;Motwin &gt; HTML5 Project&quot; and click &quot;Next&quot;. Or click the arrow on the right.">
         <command
             required="false"
             serialization="org.eclipse.ui.newWizard(newWizardId=com.motwin.ide.html5.ui.wizards.EmptyProjectWizard)"/> 
      </subitem>
      <subitem
            label="Enter the project name as &quot;RssReader-HTML5&quot; and click &quot;Next&quot;.">
      </subitem>
      <subitem label="Accept the default preloaded value of &quot;Protocol&quot;. This property enables by default the use of the websocket so that the sample can be tested directly in a websocket compatible browser."></subitem>
      <subitem
            label="Enter the URL of your Motwin server as &quot;Server URL&quot;, or leave the default one if you can access the Motwin test server. Same for the &quot;Server Port&quot;.">
      </subitem>
      <subitem label="Enter the appName as &quot;rssReader&quot;.">
      </subitem>
      <subitem label="Enter the appVersion as &quot;3.2&quot;.">
      </subitem>
      <subitem label="Click &quot;Finish&quot;.">
      </subitem>
   </item>
   <item title="Add jQuery, jQuery Mobile and Knockout JS">
    <description>
    Add the latest version of jQuery, jQuery Mobile and Knockout JS to the libraries directory of your project.
    </description>
    <subitem label="Download the latest version of jQuery, jQuery Mobile and Knockout JS from there own web site and copy them to the libraries directory of your project.">
      <action pluginId="com.motwin.ide.html5.cheatsheets.rssreader" class="com.motwin.ide.html5.cheatsheets.samples.rssreader.actions.CopyJQueryDependenciesAction"/>
    </subitem>
    <subitem label="Modify index.html file by adding references to the downloaded files.">
      <description>Once downloaded, you have to add references to the JS and CSS files.</description>
    </subitem>
   </item>
   <item title="Enhance the index.html">
    <description>
    Let&apos;s modify the index.html file by adding two input fields: one to fill in a first name and the other one to fill in a last name. 
    </description>
    <subitem label="To do so, click the arrow on the right.">
      <action pluginId="com.motwin.ide.html5.cheatsheets.rssreader" class="com.motwin.ide.html5.cheatsheets.samples.rssreader.actions.CopyIndexHTMLAction"/>
    </subitem>
    <subitem skip="true" label="If you look near line 45, you will see the new body of the index.html. This parts will be used to display the list of rss feeds.">
      <action pluginId="com.motwin.ide.html5.cheatsheets.rssreader" class="com.motwin.ide.html5.cheatsheets.samples.rssreader.actions.ShowHTMLFeedsListAction"/>
    </subitem>
    <subitem skip="true" label="If you look near line 56, you will see the use of the Knockout.js attribute &quot;data-bind&quot; to bind html components with Javascript structures.">
      <action pluginId="com.motwin.ide.html5.cheatsheets.rssreader" class="com.motwin.ide.html5.cheatsheets.samples.rssreader.actions.ShowDataBindAttrAction"/>
    </subitem>
    <subitem skip="true" label="If you look near line 70, you will see the html part used to display the list of rss entries of a selected feed.">
      <action pluginId="com.motwin.ide.html5.cheatsheets.rssreader" class="com.motwin.ide.html5.cheatsheets.samples.rssreader.actions.ShowHTMLEntriesListAction"/>
    </subitem>
    <subitem skip="true" label="If you look near line 90, you will see the html part used to display the details of rss entry (title, date, content).">
      <action pluginId="com.motwin.ide.html5.cheatsheets.rssreader" class="com.motwin.ide.html5.cheatsheets.samples.rssreader.actions.ShowHTMLEntryDetailsAction"/>
    </subitem>    
    <subitem skip="true" label="You can open the index.html in a browser to see what it looks like. Right-click the &quot;index.html&quot; and select &quot;Open With &gt; Web Browser&quot; or click the arrow on the right.">
      <action pluginId="com.motwin.ide.html5.cheatsheets.rssreader" class="com.motwin.ide.html5.cheatsheets.samples.rssreader.actions.OpenIndexHTMLBrowserAction"/>
    </subitem>
   </item>
   <item title="Use the Motwin SDK to connect to the MOS Server">
    <description>
      Until now, nothing is done yet to get the feeds and their entries. Let&apos;s modify the application.js file so that we can send a continuous query to the MOS Server and get the feeds and entries.
    </description>
    <subitem label="To do so, click the arrow on the right.">
      <action pluginId="com.motwin.ide.html5.cheatsheets.rssreader" class="com.motwin.ide.html5.cheatsheets.samples.rssreader.actions.CopyApplicationJSAction"/>
    </subitem>
    <subitem skip="true" label="If you look near line 173, you will see how the ClientChannel is created via the Motwin SDK API.">
      <action pluginId="com.motwin.ide.html5.cheatsheets.rssreader" class="com.motwin.ide.html5.cheatsheets.samples.rssreader.actions.ShowClientChannelInitAction"/>
    </subitem>
    <subitem skip="true" label="If you look near line 180, you will see how the ClientChannel connection is created.">
      <action pluginId="com.motwin.ide.html5.cheatsheets.rssreader" class="com.motwin.ide.html5.cheatsheets.samples.rssreader.actions.ShowClientChannelConnectAction"/>
    </subitem>
    <subitem skip="true" label="If you look near line 39, you will see the definition of RssListViewModel which binds the html components to javascript functions. At line 39, you will see how to declare a continuous query that queries the MOS server to get all the feeds.">
      <action pluginId="com.motwin.ide.html5.cheatsheets.rssreader" class="com.motwin.ide.html5.cheatsheets.samples.rssreader.actions.ShowRssListViewModelAction"/>
    </subitem>    
    <subitem skip="true" label="If you look near line 49, you will see how to start the continuous query. The start of the continuous query is bound to a javascript event.">
      <action pluginId="com.motwin.ide.html5.cheatsheets.rssreader" class="com.motwin.ide.html5.cheatsheets.samples.rssreader.actions.ShowFeedsListContinousQueryStartAction"/>
    </subitem>
    <subitem skip="true" label="If you look near line 57, you will see how the contiunous query is stopped. The stop is also triggered by a javascript event.">
      <action pluginId="com.motwin.ide.html5.cheatsheets.rssreader" class="com.motwin.ide.html5.cheatsheets.samples.rssreader.actions.ShowFeedsListContinousQueryStopAction"/>
    </subitem>
    <subitem skip="true" label="If you look near line 61, you will see how to go to the list of entries of a selected feed. Here, the javascript library Knockout.js is used for binding of the html components and the data model (l. 62 and l. 67).">
      <action pluginId="com.motwin.ide.html5.cheatsheets.rssreader" class="com.motwin.ide.html5.cheatsheets.samples.rssreader.actions.ShowGoToEntriesListAction"/>
    </subitem>    
    <subitem skip="true" label="If you look near line 73, you will find the same mechanism to build and attach a continuous query used to display the list of entries of a selected feed while near line 121, you will find the code to display the details of a feed entry.">
      <action pluginId="com.motwin.ide.html5.cheatsheets.rssreader" class="com.motwin.ide.html5.cheatsheets.samples.rssreader.actions.ShowRssEntryListViewModelAction"/>
    </subitem>
   </item>
   <item title="Let&apos;s test it!">
    <description>
      Let&apos;s test our HTML5 application within a web browser...
    </description>
    <subitem label="Right-click the &quot;index.html&quot; and select &quot;Open With &gt; Web Browser&quot; or click the arrow on the right. If ever the UI is not filled in with feeds, click on the green arrow of the Eclipse browser toolbar to refresh the browser (also, do ensure the RssReader server sample is started).">
      <action pluginId="com.motwin.ide.html5.cheatsheets.rssreader" class="com.motwin.ide.html5.cheatsheets.samples.rssreader.actions.OpenIndexHTMLBrowserAction"/>
    </subitem>
    <subitem label="Selecting one of them, displays the list of RSS Entries of the feed. At last, selecting one of the Feed Entry, displays its detail. When selecting for the first time one item, you may see a &quot;Loading...&quot; bubble: that's because the server side is querying the backend. But selecting again the same item should be immediate: that's because the result has been cached thanks to the Motwin SDK."></subitem>
   </item>  
   <item title="Let&apos;s export as a Native Project" dialog="true">
    <description>Full HTML5/CSS3/JavaScript projects developed with Motwin HTML5 SDK can be exported to native
      projects using Cordova/PhoneGap connector to connect to the server using standard sockets rather than WebSockets or HTTP.
      <br/>
      The bridges to the native platform are Apache Cordova plugins used to access the native network stack
      of the device. These plugins are platform dependent. The Motwin HTML5 SDK is shipped with Android
      and iOS versions.
      <br/>
    </description>
      <subitem skip="true" label="In the Project Explorer, right-click the project and select &quot;Export&quot; and then &quot;Motwin HTML5 &gt; Export Web Content as Android Project&quot; or &quot;Motwin HTML5 &gt; Export Web Content as iOS Project&quot; depending your target mobile OS. And click on &quot;Next&quot;.">
      </subitem>
      <subitem skip="true" label="Navigate to the &quot;www&quot; folder in the HTML5 project and click &quot;Next&quot;."></subitem>
      <subitem skip="true" label="Choose the location you want to create the Android or iOS project and click &quot;Next&quot;."></subitem>
      <subitem skip="true" label="Set the Android / iOS application properties and click &quot;Finish&quot;. Then, follow the instructions of the popup window  &quot;Project Exported&quot;."></subitem>
      <onCompletion>Congratulations! You have run the Motwin HTML5 RSS Reader application and see how to export it into a native project! If you wish, you can continue with the other HTML5 tutorials.</onCompletion>
   </item>    
</cheatsheet>